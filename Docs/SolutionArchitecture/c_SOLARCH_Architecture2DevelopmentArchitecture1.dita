<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="d1e869" xml:lang="en-us">
<title>Development architecture</title>
<shortdesc>The <keyword conref="../common_files/conrefs.dita#conrefs/compname_devenv"/> is composed
of a <keyword conref="../common_files/conrefs.dita#conrefs/compname_sdej"/> and a <keyword
conref="../common_files/conrefs.dita#conrefs/compname_cdej"/>.</shortdesc>
<conbody>
<p>The <keyword conref="../common_files/conrefs.dita#conrefs/prodname_short"/> development approach
has the following key features:</p>
<ul>
<li>Metamodel-based development approach.</li>
<li>Application model that is based on UML.</li>
<li>Code generators that produce significant portions of client/server
applications.</li>
<li>Simplified coding of handcrafted business logic.</li>
<li>Simplified development of user interfaces.</li>
<li>High-level business infrastructure.</li>
</ul>
<section id="section_cgh_25r_wfb">
<title>Server Development Environment</title>
<p>The Server Development Environment uses a model-based approach to development. An application
model is defined in a business-centric and platform-independent manner using a UML modeling
tool.<?Pub Caret -1?>
</p>
<p>The model is the key building block for the code generators as it defines all the required entity
objects and process objects.</p>
<p>The generators will create the necessary classes and files for the application structure. This
structure will also have all the Remote Interface Layer code, the Data Access Layer code and the
Business Object Layer code as well as handcrafted code.</p>
<p>The application model contains:</p>
<dl>
<dlentry>
<dt>Domains:</dt>
<dd>Application-specific datatypes.</dd>
</dlentry>
<dlentry>
<dt>Entities:</dt>
<dd>The objects modeled and persistently stored by the application.</dd>
</dlentry>
<dlentry>
<dt>Processes:</dt>
<dd>Related sets of activities to achieve some business goal.</dd>
</dlentry>
<dlentry>
<dt>Value objects:</dt>
<dd>Passed as messages throughout the application.</dd>
</dlentry>
</dl>
</section>
<section id="section_qkl_25r_wfb">
<title>Client Development Environment</title>
<p>The <keyword conref="../common_files/conrefs.dita#conrefs/prodname"/> client consists of HTML
pages that are generated by JSPs. The JSPs are generated from XML screen definitions and style
sheets control the formatting of screen pages. The XML screen definitions are independent of the
presentation layer, and the <keyword conref="../common_files/conrefs.dita#conrefs/prodname"/>
specific format is called user interface metadata (UIM) format.</p>
<p>Automatic data validation and conversion is based on application model definitions with support
for custom widgets and JavaScript exit points.</p>
</section>
<section id="section_j3k_w5r_wfb">
<title>User interface development</title>
<p>A major goal of the <keyword conref="../common_files/conrefs.dita#conrefs/prodname"/> development
environment is to simplify user interface creation. You can associate client pages with particular
back-end server interfaces. Because metadata about these interfaces is already captured in the
application model, you can use this information for user interface generation.</p>
<p>Most of the remaining work for client development is to list the fields for each client page.
Default widget types are provided for fields and controls on the screen, which is based on its
information of the datatypes that are associated with fields.</p>
<p>Fields follow a grid layout in clusters and lists that are specified in XML along with the
overall page hierarchy. Widget types are determined automatically by connections.</p>
<p>An example of the User Interface Metadata (UIM) code for the <filepath>firstname</filepath> field
is as follows:</p>
<codeblock>          &lt;FIELD LABEL="Field.Label.FirstName">
          &lt;CONNECT>
          &lt;SOURCE NAME="Interface1" PROPERTY="firstForename"/>
          &lt;/CONNECT>
                   &lt;/FIELD>
        </codeblock>
<p>The LABEL attribute of the FIELD element describes the label text that is associated with this
field when a client page is displayed. The value Field.Label.FirstName is a reference to the actual
label value in a separate property file. Using strings that are externalized in property files
allows for easy localization of client applications. The SOURCE element describes where this field's
contents comes from when the page is displayed. The NAME attribute of the SOURCE element specifies a
specific back-end interface that is defined in the application model. The PROPERTY attribute
specifies a particular datum that is returned by the back-end interface.</p>
<?Pub Caret -2?>
<p>The exact location of the field on the screen is not specified. There is no information about the
field's datatype or the associated HTML control. All of this information is provided automatically
at application build time. The simplicity of UIM pages makes them easy to copy and paste from
templates, which contributes to a high level of developer productivity.</p>
</section>
</conbody>
</concept>
<?Pub *0000000940?>
