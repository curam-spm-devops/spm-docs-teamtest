<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="d1e308" xml:lang="en-us">
<title>Runtime architecture</title>
<shortdesc>At a logical design level, <keyword
conref="../common_files/conrefs.dita#conrefs/prodname_short"/> applications are platform
independent. The concrete realization of an <keyword
conref="../common_files/conrefs.dita#conrefs/prodname_short"/> application must be deployed in a
<term>real world</term> environment.</shortdesc>
<conbody>
<p> As already mentioned, business objects can be deployed in various ways. The online client/server
environment is one of the more important (and complex) ways. Online applications follow the Java EE
architecture, which is a modern n-tier architecture with separate Presentation, Application, and
Persistence tiers. This logical three-tier architecture has become the standard for developing
client/server applications. Separating presentation, application logic, and persistent storage
allows the different concerns of these tiers to be considered in relative isolation and promotes
easier design. <keyword conref="../common_files/conrefs.dita#conrefs/prodname_short"/> simplifies
this concept even further by hiding much of the complexity of n-tier application development.</p>
<section id="section_ibd_tvr_wfb">
<title>The relationship to Java EE architecture</title>
<p>Consider the Java Enterprise Edition (J2EE) architectural layers, as described in the Distributed
Multitiered Applications topic in the Jave EE 5 Tutorial.</p>
<p>For more information about the Distributed Multitiered Applications, see the <xref format="html"
href="http://docs.oracle.com/javaee/5/tutorial/doc/" scope="external">The Java EE 5 Tutorial
</xref>.</p>
<!--<ul>
<li>Client-side presentation: <ul>
<li>Browser (HTML, Java Applet)</li>
<li>Desktop (Java application)</li>
<li>Other devices (Java Platform, Enterprise Edition client)</li>
</ul></li>
<li>Server-side presentation: <ul>
<li>Web Server (JSP, Java Servlet, J2EE)</li>
</ul></li>
<li>Server-side business logic: <ul>
<li>EJB Container (EJBs, J2EE)</li>
</ul></li>
<li>Enterprise information system (EIS): <ul>
<li>Various databases</li>
</ul></li>
</ul>-->
<p>The <keyword conref="../common_files/conrefs.dita#conrefs/prodname"/> client-side presentation
tier consists of HTML and JavaScript user interfaces that are rendered by a standard browser program
on the user's desktop. Only HTML and JavaScript user interfaces are directly supported with client
generation tools. Other types of clients can also be developed by using generated Server Access
Beans to connect to the server.</p>
<p>At run time, the HTML user interface is generated by a server-side presentation layer that
consists of JavaServer Pages. Browser clients communicate with this layer over HTTP, typically
encrypted with SSL for security reasons.</p>
<p>The server-side presentation layer communicates with the server-side business logic through the
RMI-IIOP protocol. Typically, business objects are presented in the business logic tier as Session
EJBs although they can also be simple Java RMI objects for the simpler deployment option that is
often used during application development. In summary, business objects are plain Java objects. Any
required middleware connections are generated when the application is built.</p>
<p>The back end of the <keyword conref="../common_files/conrefs.dita#conrefs/prodname"/>
architecture is a relational database plus other enterprise and legacy applications. Again, the
middleware plumbing that is required to communicate with the EIS is generated.</p>
</section>
<section id="section_ckh_tvr_wfb">
<title>Summary of Java Technologies used</title>
<p>A summary of the Java Technologies used by <keyword
conref="../common_files/conrefs.dita#conrefs/prodname_short"/>.</p>
<dl>
<dlentry>
<dt>EJB Enterprise Java Beans</dt>
<dd><keyword conref="../common_files/conrefs.dita#conrefs/prodname_short"/> uses Enterprise Java
Beans for its server component model.</dd>
</dlentry>
<dlentry>
<dt>Java Servlets</dt>
<dd>Java Servlets are used by the presentation tier.</dd>
</dlentry>
<dlentry>
<dt>JSP Java Server Pages</dt>
<dd>Java Server Pages are used to generate the user interface.</dd>
</dlentry>
<dlentry>
<dt>JTA Java Transaction API</dt>
<dd>Java Transaction API is used for starting and committing transactions.</dd>
</dlentry>
<dlentry>
<dt>JDBC Java Database Connectivity</dt>
<dd>Java Database Connectivity is used for the middleware to communicate with the application
database.</dd>
</dlentry>
<dlentry>
<dt>JMS Java Message Service</dt>
<dd>Java Message Service is used for deferred processing and workflow within <keyword
conref="../common_files/conrefs.dita#conrefs/prodname_short"/>.</dd>
</dlentry>
<dlentry>
<dt>JNDI Java Naming and Directory Interface</dt>
<dd>Java Naming and Directory Interface is used in <keyword conref="../common_files/conrefs.dita#conrefs/prodname_short"/> both for
application initialization-time lookup of Data Sources and Queues as well as to locate Enterprise
Java Beans from the Presentation Tier.</dd>
</dlentry>
<dlentry>
<dt>RMI-IIOP Remote Method Invocation</dt>
<dd>Remote Method Invocation over IIOP is used as the communications protocol between the
presentation and application tiers.</dd>
</dlentry>
</dl>
</section>
</conbody>
</concept>
<?Pub *0000001270?>
